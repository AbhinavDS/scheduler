(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 7845, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 2870, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 669, in reconnect\n    self.connection = f()\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 2868, in connector\n    return self.driver.connect(msg,**driver_args)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/dbapi.py", line 752, in connect\n    password=password, socket_timeout=socket_timeout, ssl=ssl)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/dbapi.py", line 483, in __init__\n    self.conn = interface.Connection(**kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/interface.py", line 539, in __init__\n    raise InterfaceError("communication error", e)\nInterfaceError: (\'communication error\', error(61, \'Connection refused\'))\n'
p3
sS'layer'
p4
S'/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/applications/schedule/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('postgres://ads:password@localhost/timetable',pool_size=1)\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\n\nauth.settings.extra_fields['auth_user']= [\n  Field('EntryNo')]\nauth.define_tables(username=True, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n##db.define_table('mytable',Field('myfield','string'),Field('myfield2','string'))\ndb.define_table('slots',Field('name','string'),Field('day','string'),Field('sTime','string'),Field('eTime','string'),Field('type','string'),format='%(name)s')\ndb.define_table('timetables',Field('tNo','integer'),Field('courseList','string'),Field('noteList','string'),format='%(tNo)s')\ndb.define_table('usertables',Field('username',db.auth_user),Field('tNo',db.timetables,unique=True))\ndb.define_table('courses',Field('sNo','integer'),Field('slot',db.slots),Field('courseId','string'),Field('courseName','string'),Field('credits','double'),Field('L','integer'),Field('T','integer'),Field('P','integer'),Field('coordi','string'),Field('regStud','integer'),Field('core','boolean'),format='%(id)s')\n\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/applications/schedule/models/db.py", line 14, in <module>\n    db = DAL(\'postgres://ads:password@localhost/timetable\',pool_size=1)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 7867, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 7845, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 2870, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 669, in reconnect\n    self.connection = f()\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/dal.py", line 2868, in connector\n    return self.driver.connect(msg,**driver_args)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/dbapi.py", line 752, in connect\n    password=password, socket_timeout=socket_timeout, ssl=ssl)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/dbapi.py", line 483, in __init__\n    self.conn = interface.Connection(**kwargs)\n  File "/Users/Abhinav/Documents/Hobbies & Stuff/Computer/Shivam/web2py/gluon/contrib/pg8000/interface.py", line 539, in __init__\n    raise InterfaceError("communication error", e)\nInterfaceError: (\'communication error\', error(61, \'Connection refused\'))\n\n'
p11
s.